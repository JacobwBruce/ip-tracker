{"version":3,"sources":["images/icon-arrow.svg","Panel.jsx","TopSection.jsx","Map.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Panel","data","sections","label","value","ip","location","timezone","isp","map","section","index","key","className","Heading","input","changeInput","handleSubmit","onSubmit","type","placeholder","onChange","e","target","src","icon","alt","onClick","lat","lng","id","center","zoom","TileLayer","url","attribution","Marker","position","App","API_KEY","useState","setData","useEffect","a","axios","result","city","region","country","as","name","fetchData","getData","query","test","console","info","log","error","preventDefault","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ae256147.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-arrow.53ef8ed8.svg\";","import React from 'react';\nimport './Panel.css';\n\nexport default function Panel({ data }) {\n    const temp = [\n        {\n            label: 'IP ADDRESS',\n            value: data.ip,\n        },\n        {\n            label: 'LOCATION',\n            value: data.location,\n        },\n        {\n            label: 'TIMEZONE',\n            value: data.timezone,\n        },\n        {\n            label: 'ISP',\n            value: data.isp,\n        },\n    ];\n\n    const sections = temp.map((section, index) => (\n        <div key={index} className='section-container'>\n            <span className='section-label'>{section.label}</span>\n            <p className='section-value'>{section.value}</p>\n        </div>\n    ));\n\n    return <div className='panel-container'>{sections}</div>;\n}\n","import React from 'react';\nimport './TopSection.css';\nimport icon from './images/icon-arrow.svg';\nimport Panel from './Panel';\n\nexport default function Heading({ input, changeInput, handleSubmit, data }) {\n    return (\n        <div className='top-section'>\n            <h1 className='title'>IP Address Tracker</h1>\n            <form onSubmit={handleSubmit} className='input-form'>\n                <div className='search-container'>\n                    <input\n                        type='text'\n                        className='search'\n                        placeholder='Search for any IP address or domain'\n                        onChange={(e) => changeInput(e.target.value)}\n                        value={input}\n                    />\n                    <div className='icon-container'>\n                        <img src={icon} alt='search-icon' onClick={handleSubmit} />\n                    </div>\n                </div>\n            </form>\n            <Panel data={data} />\n        </div>\n    );\n}\n","import React from 'react';\nimport './Map.css';\nimport { Map, TileLayer, Marker } from 'react-leaflet';\n// import { Icon } from 'leaflet';\n\nexport default function ({ data }) {\n    const zoom = 17;\n    // const icon = new Icon({ iconUrl: './images/icon-location.svg' });\n    const { lat, lng } = data;\n    return (\n        <Map id='mapid' center={[lat, lng]} zoom={zoom}>\n            <TileLayer\n                url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a>\n            contributors'\n            />\n            <Marker position={[lat, lng]} />\n        </Map>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TopSection from './TopSection';\nimport Map from './Map';\nimport axios from 'axios';\n\nfunction App() {\n  const API_KEY =\n    'at_H3N6BZijtUJBj67qKczSHF2toz17S';\n  const [input, changeInput] = useState('');\n  const [data, setData] = useState(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getData(input);\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      let result = await axios(`https://geo.ipify.org/api/v1?apiKey=${API_KEY}`);\n      setData({\n        lat: result.data.location.lat,\n        lng: result.data.location.lng,\n        timezone: result.data.location.timezone,\n        location: `${result.data.location.city}, ${result.data.location.region}, ${result.data.location.country}`,\n        isp: result.data.as.name,\n        ip: result.data.ip\n      });\n    }\n    fetchData();\n  }, []);\n\n  const isValidIp = (ip) => {\n    if (\n      /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n        ip\n      )\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  const getData = async (query) => {\n    let result;\n    try {\n      if (isValidIp(query)) {\n        console.info('Searching for an IP Address')\n        result = await axios(\n          `https://geo.ipify.org/api/v1?apiKey=${API_KEY}&ipAddress=${query}`\n        );\n      } else {\n        console.log('Searching for a domain');\n        result = await axios(\n          `https://geo.ipify.org/api/v1?apiKey=${API_KEY}&domain=${query}`\n        );\n      }\n      setData({\n        lat: result.data.location.lat,\n        lng: result.data.location.lng,\n        timezone: result.data.location.timezone,\n        location: `${result.data.location.city}, ${result.data.location.region}, ${result.data.location.country}`,\n        isp: result.data.as.name,\n        ip: result.data.ip\n      });\n    } catch (err) {\n      console.error(`Could not find ${query}. Try another search ${err}`)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {data &&\n        <>\n          <TopSection input={input} changeInput={changeInput} handleSubmit={handleSubmit} data={data} />\n          <Map data={data} />\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}